Oracle Database Download link
=============================
https://drive.google.com/file/d/0B9rC21sL6v0td1NDZXpkUy1oMm8/view?usp=drive_link&resourcekey=0-aKooR3NmAh_eLo_qGw_inA



HTML to Servlet to Database communication
==========================================
Diagram: servlet4.1

Deployment Directory structure
----------------------------
DBApp
|
|---Java Resources
|	|
	|-----src
		|
		|----com.ihub.www
			|
			|---DBSrv.java
|
|---Web Content
	|
	|----form.html
	|----WEB-INF
		|
		|---web.xml 
		|
		|------lib
			|
			|----ojdbc14.jar

Note:
-----
In above application we need to add "servlet-api.jar" and "ojdbc14.jar" file in project build path.

Copy and paste "ojdbc14.jar" file in "WEB-INF/lib" folder seperately.


student table
============
drop table student;

create table student(sno number(3),sname varchar2(10),sadd varchar2(12));

form.html
--------

<form action="test" method="GET">
	
	No: <input type="text" name="t1"/> <br>
	Name: <input type="text" name="t2"/> <br>
	Address: <input type="text" name="t3"/> <br>
	<input type="submit" value="submit"/>

</form>

web.xml
---------
<?xml version="1.0" encoding="UTF-8"?>
<web-app xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns="http://java.sun.com/xml/ns/javaee" xsi:schemaLocation="http://java.sun.com/xml/ns/javaee http://java.sun.com/xml/ns/javaee/web-app_3_0.xsd" id="WebApp_ID" version="3.0">
  
  <welcome-file-list>
  	<welcome-file>form.html</welcome-file>
  </welcome-file-list>
  
  <servlet>
  	<servlet-name>DBSrv</servlet-name>
  	<servlet-class>com.ihub.www.DBSrv</servlet-class>
  </servlet>
  <servlet-mapping>
  	<servlet-name>DBSrv</servlet-name>
  	<url-pattern>/test</url-pattern>
  </servlet-mapping>
  
</web-app>

DBSrv.java
-----------
package com.ihub.www;

import java.io.IOException;
import java.io.PrintWriter;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;

import javax.servlet.ServletException;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

public class DBSrv extends HttpServlet 
{
	protected void doGet(HttpServletRequest req,HttpServletResponse res)throws ServletException,IOException
	{
		PrintWriter pw=res.getWriter();
		res.setContentType("text/html");
		
		//reading form data
		String sno=req.getParameter("t1");
		int no=Integer.parseInt(sno);
		
		String name=req.getParameter("t2");
		String add=req.getParameter("t3");
		
		//store the data in a oracle DB 
		Connection con=null;
		PreparedStatement ps=null;
		String qry=null;
		int result=0;
		try
		{
			Class.forName("oracle.jdbc.driver.OracleDriver");
			con=DriverManager.getConnection("jdbc:oracle:thin:@localhost:1521:XE","system","admin");
			
			qry="insert into student values(?,?,?)";
			
			ps=con.prepareStatement(qry);
			
			//set the values
			ps.setInt(1,no);
			ps.setString(2,name);
			ps.setString(3,add);
			
			//execute 
			result=ps.executeUpdate();
			
			if(result==0)
				pw.println("<center><h1>Record Not Inserted</h1></center>");
			else
				pw.println("<center><h1>Record Inserted</h1></center>");
			
			ps.close();
			con.close();
		}
		catch(Exception e)
		{
			e.printStackTrace();
		}
		
		
		pw.close();
	}
}


Request url
-------------
	http://localhost:2525/DBApp/


Q)What is the difference between GET and POST methodology?

GET					POST
--------				--------
It is a default methodology.		It is not a default methodology.

It sends the request fastly.		It sends the request bit slow.

It will carry limited amount of data.	It will carry unlimited amount of data.

It is not suitable for secure data.	It is suitable for secure data.

It show the query string in a browser.	It does not show the query string in a 
					browser.

It is not suitable to perform file 	It is suitable to perform file uploading
uploading or encryption.		or encryption.

To process GET methodology we will use	To process POST methodology we will use 
doGet(-,-) method.			doPost(-,-) method.


Form validation
===================
The process of checking format and pattern of form data is called form validation and such logic is called form validation logic.

Form validation can be perform in two ways.

1)Client side form validation
-----------------------------
Validation which is performed at client side is called client side form validation.
To perform client side form validation we need to use javascript.

2)Server side form validation 
----------------------------
Validation which is performed at server side is called server side form validation.
To perform server side form validation we need to use java(servlet).


Deployment Directory structure
----------------------------
ValidationApp
|
|---Java Resources
|	|
	|-----src
		|
		|----com.ihub.www
			|
			|---FormSrv.java
|
|---Web Content
	|
	|----form.html
	|
	|----validation.js
	|
	|----WEB-INF
		|
		|---web.xml 
	
Note:
-----
In above application we need to add "servlet-api.jar" file in project build path.


form.html
--------
<html>
	<head>
		<title>MyPage</title>
		
		<!--  add javascript file  -->
		<script type="text/javascript" src="validation.js"></script>
		
	</head>
	<body>
		
		<form name="myform" action="test" method="GET" onsubmit="return validate()">
			Name: <input type="text" name="t1"/> <br>
			Age: <input type="text" name="t2"/> <br>
			
			<!--  hidden text field -->
			<input type="hidden" name="vflag" value="no"/>
			
			<input type="submit" value="submit"/>	
		</form>
	
	</body>
</html>

validation.js
---------------
function validate()
{
	var name=document.myform.t1.value;
	var age=document.myform.t2.value;
	document.myform.vflag.value="yes";
	
	if(name=="")
	{
		alert("Name is mandatory");
		document.myform.t1.focus();
		return false;
	}
	if(age=="")
	{
		alert("Age is mandatory");
		document.myform.t2.focus();
		return false;
	}
	else
	{
		if(isNaN(age))
		{
			alert("Age must be numeric");
			document.myform.t2.value="";
			document.myform.t2.focus();
			return false;
		}
	}
	
	return true;
}

web.xml
--------
<?xml version="1.0" encoding="UTF-8"?>
<web-app xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns="http://java.sun.com/xml/ns/javaee" xsi:schemaLocation="http://java.sun.com/xml/ns/javaee http://java.sun.com/xml/ns/javaee/web-app_3_0.xsd" id="WebApp_ID" version="3.0">
 
 <servlet>
 	<servlet-name>FormSrv</servlet-name>
 	<servlet-class>com.ihub.www.FormSrv</servlet-class>
 </servlet>
 <servlet-mapping>
 	<servlet-name>FormSrv</servlet-name>
 	<url-pattern>/test</url-pattern>
 </servlet-mapping>
 
 <welcome-file-list>
 	<welcome-file>form.html</welcome-file>
 </welcome-file-list>
 
</web-app>

FormSrv.java
------------
package com.ihub.www;

import java.io.IOException;
import java.io.PrintWriter;

import javax.servlet.ServletException;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

public class FormSrv extends HttpServlet
{
	protected void doGet(HttpServletRequest req,HttpServletResponse res)throws ServletException,IOException
	{
		PrintWriter pw=res.getWriter();
		res.setContentType("text/html");
		
		//reading form data
		String name=req.getParameter("t1");
		String sage=req.getParameter("t2");
		String status=req.getParameter("vflag");
		int age=0;
		
		if(status.equals("yes"))
		{
			age=Integer.parseInt(sage);
		}
		
		if(age<18)
			pw.println("<center><h1>U r not eligible to vote</h1></center>");
		else
			pw.println("<center><h1>U r eligible to vote</h1></center>");
		
		pw.close();
	}
}

request url
----------
	http://localhost:2525/ValidationApp/


File uploading
===============
The process of capturing a file from client machine file system and storing a server machine file system is called file uploading and reverse is called file downloading.

In servlet , there is no specific API to perform file uploading.

Here we need to take support of third party API called JAVAZOOM API.

JAVAZOOM API comes in a zip format and once if we extracted we will get three jar files.

1) uploadbean.jar (main jar file)

2) cos.jar

3) struts.jar 

We can keep file component in a  form page as follow.
ex:
	<input type="file" name="f1"/>


JAVAZOOM API link
------------------
https://drive.google.com/file/d/1LB0WSJvSCCVOgz7xNwyuYtmy_0_TfJzq/view?usp=drive_link



Deployment Directory structure
----------------------------
UploadApp
|
|---Java Resources
|	|
	|-----src
		|
		|----com.ihub.www
			|
			|---FormSrv.java
|
|---Web Content
	|
	|----form.html
	|
	|----WEB-INF
		|
		|---web.xml 
		|
		|------lib
			|
			|----uploadbean.jar
			|----struts.jar
			|----cos.jar 
	
Note:
-----
In above application we need to add "servlet-api.jar" and "uploadbean.jar" file in project build path.

Copy and paste javazoom api jar files inside "WEB-INF/lib" folder seperately.


form.html
----------

<form action="test" method="POST" enctype="multipart/form-data">

	File1: <input type="file" name="f1"/><br>
	
	File2: <input type="file" name="f2"/> <br>
	
	<input type="submit" value="upload"/>

</form>

web.xml
--------
<?xml version="1.0" encoding="UTF-8"?>
<web-app xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns="http://java.sun.com/xml/ns/javaee" xsi:schemaLocation="http://java.sun.com/xml/ns/javaee http://java.sun.com/xml/ns/javaee/web-app_3_0.xsd" id="WebApp_ID" version="3.0">
  
  <servlet>
	<servlet-name>FormSrv</servlet-name>
	<servlet-class>com.ihub.www.FormSrv</servlet-class>
  </servlet>
  <servlet-mapping>
  	<servlet-name>FormSrv</servlet-name>
  	<url-pattern>/test</url-pattern>
  </servlet-mapping>
  
  <welcome-file-list>
  	<welcome-file>form.html</welcome-file>
  </welcome-file-list>

</web-app>

FormSrv.java
------------
package com.ihub.www;

import java.io.IOException;
import java.io.PrintWriter;

import javax.servlet.ServletException;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import javazoom.upload.MultipartFormDataRequest;
import javazoom.upload.UploadBean;

public class FormSrv extends HttpServlet  
{
	protected void doPost(HttpServletRequest req,HttpServletResponse res)throws ServletException,IOException
	{
		PrintWriter pw=res.getWriter();
		res.setContentType("text/html");
		
		//upload the files
		try
		{
			UploadBean ub=new UploadBean();
			ub.setFolderstore("C:\\ihub");
			ub.setOverwrite(false);
			
			MultipartFormDataRequest nreq=new MultipartFormDataRequest(req);
			ub.store(nreq);
			
			pw.println("<center><h1>Files are uploaded successfully.</h1></center>");
			
			
		}
		catch(Exception e)
		{
			pw.println(e);
		}
		
		pw.close();
	}
		
}

Request url
----------
	http://localhost:2525/UploadApp/

















































































































































































