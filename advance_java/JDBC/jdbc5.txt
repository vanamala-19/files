Working with Date values
==========================
While dealing with DOB, DOR, DOD , DOA and etc. We need to insert and retrive date values.

It is never recommanded to store date values in the form String because it will not give you proper comparision between two dates.

Every database software supports date values in different date patterns.
ex:
	Oracle -  dd-MMM-yy
	MySQL  -  yyyy-MM-dd

A java.util.Date class is not suitable to perform database operation.

A java.sql.Date class is suitable to perform database operations.

JDBC driver will insert date value in the pattern which is supported by underlying database software.

Diagram: jdbc5.1

With respect to the diagram
-----------------------------
1) Enduser will give date value in the form of String.

2) A parse() method of java.text.SimpleDateFormat class converts String date to 
   java.util.Date class object.

3) Our application converts java.util.Date class objec to java.sql.Date class object.

4) A ps.setDate(-,-) is used to set the date values to query parameters.

5) JDBC driver will insert date value in the pattern which is supported by underlying 
   database software.

emp1 table
============
drop table emp1;

create table emp1(eid number(3),ename varchar2(10),edoj date);

ex:
---
package com.ihub.www;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.text.SimpleDateFormat;
import java.util.Scanner;

public class DateInsertApp 
{
	public static void main(String[] args)throws Exception  
	{
		Scanner sc=new Scanner(System.in);
		
		System.out.println("Enter the employee Id :");
		int id=sc.nextInt();
		
		System.out.println("Enter the employee name :");
		String name=sc.next();
		
		System.out.println("Enter the employee doj - dd-MM-yyyy  :");
		String sdoj=sc.next();
		
		//converting string date to util date
		SimpleDateFormat sdf=new SimpleDateFormat("dd-MM-yyyy");
		java.util.Date udoj=sdf.parse(sdoj);
		
		//converting util date to sql date
		long ms=udoj.getTime();
		java.sql.Date sqldoj=new java.sql.Date(ms);
		
		Class.forName("oracle.jdbc.driver.OracleDriver");
		Connection con=DriverManager.getConnection("jdbc:oracle:thin:@localhost:1521:XE","system","admin");
	
		String qry="insert into emp1 values(?,?,?)";
		
		PreparedStatement ps=con.prepareStatement(qry);
		
		//set the values
		ps.setInt(1,id);
		ps.setString(2,name);
		ps.setDate(3,sqldoj);
		
		//execute
		int result=ps.executeUpdate();
		if(result==0)
			System.out.println("No Record inserted");
		else
			System.out.println("Record inserted");
		
		ps.close();
		con.close();
	}
}


DateRetrieveApp.java
--------------------
package com.ihub.www;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.Statement;
import java.text.SimpleDateFormat;

public class DateRetrieveApp 
{
	public static void main(String[] args)throws Exception
	{
		Class.forName("oracle.jdbc.driver.OracleDriver");
		Connection con=DriverManager.getConnection("jdbc:oracle:thin:@localhost:1521:XE","system","admin");
		Statement st=con.createStatement();
		String qry="select * from emp1";
		ResultSet rs=st.executeQuery(qry);
		while(rs.next())
		{
			int id=rs.getInt(1);
			String name=rs.getString(2);
			java.sql.Date sqldoj=rs.getDate(3);
			
			//converting sql date to util date
			java.util.Date udoj=(java.util.Date)sqldoj;
			
			//converting util date to string date
			SimpleDateFormat sdf=new SimpleDateFormat("dd-MM-yyyy");
			String sdoj=sdf.format(udoj);
			
			System.out.println(id+" "+name+" "+sdoj);
		}
		rs.close();
		st.close();
		con.close();
	}
}

Working with LOB values
========================
Files are known as LOB's.

We have two types of LOB's.

1)BLOB (Binary Large Object)
	ex:
		images,audios,videos and etc.

2)CLOB (Character Large Object)
	ex:
		text file, advanced text file and etc.


While dealing with matrimonial applications, job portal applications, profile management application we need to insert and retrieve lob values.

Using simple Statement object it is not possible to keep lob values directly to query parameter.To overcome this limitation we need to use PreparedStatement object.

To set the values to query parameters we need to use following methods.
ex:
	setBLOB(-,-,-) / setBinaryStream(-,-,-)
	setCLOB(-,-,-) / setCharacterStream(-,-,-)

emp2 table
-----------
drop table emp2;

create table emp2(eid number(3),ename varchar2(10), ephoto BLOB);


PhotoInsertApp.java
------------------
package com.ihub.www;

import java.io.File;
import java.io.FileInputStream;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.util.Scanner;

public class PhotoInsertApp 
{
	public static void main(String[] args)throws Exception 
	{
		Scanner sc=new Scanner(System.in);
		
		System.out.println("Enter the employee Id :");
		int id=sc.nextInt();
		
		System.out.println("Enter the employee name :");
		String name=sc.next();
		
		//locate a file
		File f=new File("src/com/ihub/www/rock.jpg");
		FileInputStream fis=new FileInputStream(f);
		
		Class.forName("oracle.jdbc.driver.OracleDriver");
		Connection con=DriverManager.getConnection("jdbc:oracle:thin:@localhost:1521:XE","system","admin");
		
		String qry="insert into emp2 values(?,?,?)";
		
		PreparedStatement ps=con.prepareStatement(qry);
		
		//set the values
		ps.setInt(1,id);
		ps.setString(2,name);
		ps.setBinaryStream(3,fis,(int)f.length());
		
		//execute 
		int result=ps.executeUpdate();
		if(result==0)
			System.out.println("No Record inserted");
		else
			System.out.println("Record Inserted");
		
		ps.close();
		con.close();
		
	}
}

PhotoRetriveApp.java
----------------------
package com.ihub.www;

import java.io.FileOutputStream;
import java.io.InputStream;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.Statement;

public class PhotoRetrieveApp 
{
	public static void main(String[] args)throws Exception  
	{
		Class.forName("oracle.jdbc.driver.OracleDriver");
		Connection con=DriverManager.getConnection("jdbc:oracle:thin:@localhost:1521:XE","system","admin");
		Statement st=con.createStatement();
		String qry="select * from emp2";
		ResultSet rs=st.executeQuery(qry);
		while(rs.next())
		{
			InputStream is=rs.getBinaryStream(3);
			FileOutputStream fos=new FileOutputStream("E:\\IHUB-Training-Batches\\pavan.png");
			int byteReads=0;
			byte[] buff=new byte[255];
			
			while((byteReads=is.read(buff))!=-1)
			{
				fos.write(buff, 0, byteReads);
			}
			fos.close();

		}
		System.out.println("Please check the location");
		rs.close();
		st.close();
		con.close();
	}
}


JDBC Flexible Application
========================
In jdbc , Connection object is a heavy weight object.

It is never recommanded to create Connection object in every jdbc application.

We need to a create seperate class which returns JDBC Connection object.

ex:
----

DBConnection.java
------------------
package com.ihub.www;

import java.sql.Connection;
import java.sql.DriverManager;

public class DBConnection 
{
	static Connection con=null;
	
	public static  Connection getConnection()
	{
		try
		{
			Class.forName("oracle.jdbc.driver.OracleDriver");
			con=DriverManager.getConnection("jdbc:oracle:thin:@localhost:1521:XE","system","admin");
		}
		catch(Exception e)
		{
			e.printStackTrace();
		}
		
		return con;
	}
}



FlexibleApp.java
------------------
package com.ihub.www;

import java.sql.Connection;
import java.sql.ResultSet;
import java.sql.Statement;

public class FlexibleApp 
{
	public static void main(String[] args)throws Exception  
	{
		Connection con=DBConnection.getConnection();
		Statement st=con.createStatement();
		String qry="select * from student";
		ResultSet rs=st.executeQuery(qry);
		while(rs.next())
		{
			System.out.println(rs.getInt(1)+" "+rs.getString(2)+" "+rs.getString(3));
		}
		rs.close();
		st.close();
		con.close();
	}
}

Working with properties file
==============================
For regular intervals our DBA will change username and password for security reason.

It is never recommanded to keep database properties directly to the application.

It is always recommandd to read database properties from properties file.

A properties file contains key and value pair. 


dbdetails.properties
----------------------
driver=oracle.jdbc.driver.OracleDriver
url=jdbc:oracle:thin:@localhost:1521:XE
username=system
password=admin 


ex:
---
package com.ihub.www;

import java.io.FileInputStream;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.Statement;
import java.util.Properties;

public class PropertiesFileApp
{
	public static void main(String[] args)throws Exception  
	{
		//locate a properties file
		FileInputStream fis=new FileInputStream("src/com/ihub/www/dbdetails.properties");
		
		//create Properties class
		Properties p=new Properties();
		
		//loading the data from properties file to properties class
		p.load(fis);
		
		//read the data from properties class.
		
		String s1=p.getProperty("driver");
		String s2=p.getProperty("url");
		String s3=p.getProperty("username");
		String s4=p.getProperty("password");
		
		Class.forName(s1);
		Connection con=DriverManager.getConnection(s2,s3,s4);
		Statement st=con.createStatement();
		String qry="select * from student";
		ResultSet rs=st.executeQuery(qry);
		while(rs.next())
		{
			System.out.println(rs.getInt(1)+" "+rs.getString(2)+" "+rs.getString(3));
		}
		rs.close();
		st.close();
		con.close();
		
	}
}



















































































































