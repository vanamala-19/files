Spring Data JPA
==================
Spring Data JPA handles most of the complexity of JDBC-based database access and ORM (Object Relational Mapping).

It reduces the boilerplate code required by JPA(Java Persistence API). 

It makes the implementation of your persistence layer easier and faster.

Spring Data JPA aims to improve the implementation of data access layers by reducing the effort to the amount that is needed.

Spring Boot provides spring-boot-starter-data-jpa dependency to connect Spring application with relational database efficiently. 
ex:

	<dependency>  
	<groupId>org.springframework.boot</groupId>  
	<artifactId>spring-boot-starter-data-jpa</artifactId>  
	<version>2.2.2.RELEASE</version>  
	</dependency>  

The spring-boot-starter-data-jpa internally uses the spring-boot-jpa dependency.


Spring Data JPA provides three repositories are as follows:

CrudRepository:
-------------------------
It offers standard create, read, update, and delete It contains method like findOne(), findAll(), save(), delete(), etc.

PagingAndSortingRepository: 
-----------------------------------------
It extends the CrudRepository and adds the findAll methods. It allows us to sort and retrieve the data in a paginated way.

JpaRepository: 
---------------------
It is a JPA specific repository It is defined in Spring Data Jpa. It extends the both repository CrudRepository and PagingAndSortingRepository. It adds the JPA-specific methods, like flush() to trigger a flush on the persistence context.



Spring Boot application to interact with H2 Database
=====================================================

Diagram: sb3.1

project structure
------------------
SBApp3
|
|----src/main/java
	|
	|---com.ihub.www
	|	|
		|---SBApp3Application.java
	|
	|---com.ihub.www.controller
		|
		|---EmployeeController.java (Class)
	|
	|---com.ihub.www.repository
		|
		|---EmployeeRepository.java (Interface)	
	|
	|---com.ihub.www.model
		|
		|---Employee.java (Class)
|
|
|----src/main/resources
	|
	|---application.properties 
	|

|-----src
	|
	|-----main
		|
		|---webapp
			|
			|----index.jsp

step1:
-----
	Create a spring boot starter project i.e MVCApp2.
	ex:
		starters: 
				spring web 
				spring data jpa 
				H2 Database 

step2:
------
	Add "Tomcat Embed Jasper" dependency to read the jsp file inside pom.xml.
	

	ex:
		<dependency>
    			<groupId>org.apache.tomcat.embed</groupId>
    			<artifactId>tomcat-embed-jasper</artifactId>
		</dependency>

step3:
------
	Create a EmployeeController inside "com.ihub.www.controller" package.

EmployeeController.java
------------------------
package com.ihub.www.controller;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.RequestMapping;

import com.ihub.www.model.Employee;
import com.ihub.www.repository.EmployeeRepository;

@Controller
public class EmployeeController 
{

	@Autowired
	EmployeeRepository employeeRepository;
	
	@RequestMapping("/")
	public String home()
	{
		return "index.jsp";
	}
	
	@RequestMapping("/addEmp")
	public String addEmployeeDetails(Employee e)
	{
		employeeRepository.save(e);
		
		return "index.jsp";
	}
}


step4:
-----
	Create index.js file inside "src/main/webapp" folder.

index.js
----------

<form action="addEmp">
	<table align="center">
		<caption>Enter the Details</caption>
		<tr>
			<td>Employee Id </td>
			<td><input type="text" name="empId"/></td>
		</tr>
		<tr>
			<td>Employee Name </td>
			<td><input type="text" name="empName"/></td>
		</tr>
		<tr>
			<td>Employee Salary </td>
			<td><input type="text" name="empSal"/></td>
		</tr>
		<tr>
			<td><input type="reset" value="reset"/></td>
			<td><input type="submit" value="submit"/></td>
		</tr>
	</table>
</form>

	
step5:
------
	Create a Employee.java file  inside "com.ihub.www.model" package.

Employee.java
------------
package com.ihub.www.model;

import jakarta.persistence.Column;
import jakarta.persistence.Entity;
import jakarta.persistence.Id;
import jakarta.persistence.Table;

@Entity
@Table
public class Employee 
{
	@Id
	private int empId;
	@Column
	private String empName;
	@Column
	private double empSal;
	
	public int getEmpId() {
		return empId;
	}
	public void setEmpId(int empId) {
		this.empId = empId;
	}
	public String getEmpName() {
		return empName;
	}
	public void setEmpName(String empName) {
		this.empName = empName;
	}
	public double getEmpSal() {
		return empSal;
	}
	public void setEmpSal(double empSal) {
		this.empSal = empSal;
	}
}


step6:
-------
	Create  a EmployeeRepository.java interface inside "com.ihub.www.repository"
	package.

EmployeeRepository.java
-------------------
package com.ihub.www.repository;

import org.springframework.data.repository.CrudRepository;
import org.springframework.stereotype.Repository;

import com.ihub.www.model.Employee;

@Repository
public interface EmployeeRepository extends CrudRepository<Employee,Integer>
{

}


step7:
----
	Configure server port and h2 database properties inside 
	application.properties file.

application.properties
------------------------
server.port=9090

spring.datasource.url= jdbc:h2:mem:testdb
spring.datasource.driverClassName=org.h2.Driver
spring.datasource.username=sa
spring.datasource.password=


spring.h2.console.enabled=true

spring.jpa.database-platform=org.hibernate.dialect.H2Dialect
spring.jpa.hibernate.ddl-auto=update


step8:
-------
	Run the spring boot starter project.

step9:
-------
	Test the application by using below request url.
	ex:

		http://localhost:9090
		http://localhost:9090/h2-console






































