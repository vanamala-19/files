2)Multiple Row sub query
===========================
If sub query returns more then one row is called multiple row sub query.

To perform multiple row sub query we need to use multiple row operators.

We have three multiple row operators.

1) ANY 

2) ALL 

3) IN 

ex:
----
	select * from emp where esal > ANY (select esal from emp where deptno=10);

	select * from emp where esal < ANY (select esal from emp where deptno=10);

ex:
---
	select * from emp where esal > ALL (select esal from emp where deptno=10);

ex:
	select * from emp where esal IN (select esal from emp where deptno=10);

	
3)Multiple Column Sub query
----------------------------
If sub query returns more then one column then we need to use multiple column sub query.

ex:

	select * from emp where(eid,ename,esal)
	IN(select eid,ename,esal from emp where eid=201);

	select eid,ename,esal from emp where(eid,ename,esal)
	IN(select eid,ename,esal from emp where eid=201);



Merge Command
================
Merge command is a combination of insert and update command.

ex:

drop table student10;
create table student10(sno number(3),sname varchar2(10),smarks number(3));
insert into student10 values(101,'raja',50);
insert into student10 values(102,'ravi',70);
insert into student10 values(103,'ramana',56);
commit;

ex:

drop table student20;
create table student20(sno number(3),sname varchar2(10),smarks number(3));
insert into student20 values(101,'Jose',98);
insert into student20 values(104,'Lisa',82);
commit;


merge into student10 s1
using student20 s2
ON(s1.sno=s2.sno)
when matched
then update set sname=s2.sname,smarks=s2.smarks
when not matched
then insert(sno,sname,smarks) values(s2.sno,s2.sname,s2.smarks);

select * from student10;
select * from student20;

PL/SQL
======
PL/SQL stands for procedural or Structured Query Language.

It is a extension of SQL and gives following features.

1) We can achieve programming features like loops, control statements and etc.

2) It reduces network traffic.

3) We can perform related operations by using the concept of triggers.

4) It will save the source code permenently to database for repeated execution.

5) We can display our own exception messages by using the concept of exception    handling.

PL/SQL Block 
==============
A PL/SQL program is also known as PL/SQL block.

syntax:
-----
DECLARE 
-
-	// Declaration section 
-
BEGIN
-
-	// Executable section 
-
EXCEPTION
-
-	// Exception section 
-
END;
/

Declaration section
---------------------
Declaration section is used to declare variables, exceptions , cursors and etc.

It is optional section.

Executable section
--------------------
It contains actual logic which is used to complete a table.

It is mandatory section.

EXCEPTION
-----------
This section will execute when exception raised in our program.

It is optional section.

To see the output in PL/SQL we need to use below command.
ex:
	set  serveroutput  on 


Q)Write a PL/SQL program to display Hello World?

BEGIN
DBMS_OUTPUT.PUT_LINE('Hello World');
END;
/

Here DBMS_OUTPUT is a package name.
Here PUT_LINE is a procedure name.

Q)Write a PL/SQL program to perform sum of two numbers?

DECLARE 
A number;
B number;
C number;
BEGIN
A:=10;
B:=20;
C:=A+B;
DBMS_OUTPUT.PUT_LINE(C);
END;
/

Declaration and Initialization using single line
------------------------------------------------
DECLARE 
A number:=10;
B number:=20;
C number:=A+B;
BEGIN
DBMS_OUTPUT.PUT_LINE('sum of two numbers is '||C);
END;
/

Using '&' symbol we can read inputs at runtime.

ex:
----
DECLARE 
A number(3);
B number(3);
C number(6);
BEGIN 
A:=&a;
B:=&b;   
C:=A+B;
DBMS_OUTPUT.PUT_LINE('sum of two numbers is='||C);
END;
/

In PL/SQL we can perform DML operations.

Q)Write a PL/SQL program to insert a record into student table?

	DECLARE 
	L_Sno number(3);
	L_Sname varchar2(10);
	L_Sadd varchar2(12);
	BEGIN
	L_Sno:=&sno;
	L_Sname:='&sname';
	L_Sadd:='&sadd';
	insert into student values(L_Sno,L_Sname,L_Sadd);
	DBMS_OUTPUT.PUT_LINE('Record Inserted');
	END;
	/

Q)Write a PL/SQL program to update student name based on student number?

	DECLARE 
	L_Sno number(3);
	BEGIN
	L_Sno:=&sno;
	update student set sname='gogo' where sno=L_Sno;
	DBMS_OUTPUT.PUT_LINE('Record updated');
	END;
	/

Q)Write a PL/SQL program to delete student record based on student number?

	DECLARE 
	L_Sno number(3);
	BEGIN
	L_Sno:=&sno;
	delete from student where sno=L_Sno;
	DBMS_OUTPUT.PUT_LINE('Record deleted');
	END;
	/

In PL/SQL we can perform select operations also.

To perform select operation in PL/SQL we need to use "into" clause.

ex:

Q)Write a PL/SQL program to display employee name whose employee id is 201?

	DECLARE 
	L_ename varchar2(10);	
	BEGIN
	select ename into L_ename from emp where eid=201;
	DBMS_OUTPUT.PUT_LINE(L_ename);
	END;
	/

Q)Write a PL/SQL program to display employee name,employee salary based on employee id?
	DECLARE
	L_ename varchar2(10);
	L_esal  number(10,2);
	L_eid   number(3);
	BEGIN
	L_eid:=&eid;
	select ename,esal into L_ename,L_esal from emp where eid=L_eid;
	DBMS_OUTPUT.PUT_LINE(L_ename||' '||L_esal);
	END;
	/

Percentage(%) TYPE attribute
==============================
It is used to declare local variable with respect to the column type.

syntax:
	variable_name   table_name.column_name%TYPE;
ex:
	A   emp.eid%TYPE;

Q)Write a PL/SQL program to display employee name,employee salary based on employee id?
	DECLARE
	L_ename emp.ename%TYPE;
	L_esal  emp.esal%TYPE;
	L_eid   emp.eid%TYPE;
	BEGIN
	L_eid:=&eid;
	select ename,esal into L_ename,L_esal from emp where eid=L_eid;
	DBMS_OUTPUT.PUT_LINE(L_ename||' '||L_esal);
	END;
	/


Percentage(%) ROWTYPE attribute
===============================
It is used to declare a variable which respect to complete row of a table.

Rowtype variable we can't display directly.

In order to access the data from rowtype variable we need to use variable_name.col_name.

syntax:
	variable_name   emp%ROWTYPE;
ex:
	A   emp%ROWTYPE;



Q)Write a PL/SQL program to display employee information based on employee Id?
	
	DECLARE

	A emp%ROWTYPE;

	L_eid emp.eid%TYPE;

	BEGIN
	L_eid:=&eid;

	select * into A from emp where eid=L_eid;

	DBMS_OUTPUT.PUT_LINE(A.eid||' '||A.ename||' '||A.esal||' '||A.deptno);

	END;
	/






























































