ii)Number function
------------------

abs()
-----
	It will return absolute value.
	ex:
		select abs(-56) from dual; //56

power(A,B)
----------
	It will return power value.
	ex:
		select power(2,3) from dual; // 2*2*2=8

ceil()
------
	It will return ceil value.
	ex:
		select ceil(10.6) from dual; // 11

		select ceil(9.2) from dual; //10

floor()
-------
	It will return floor value.
	ex:
		select floor(10.6) from dual; // 10

		select floor(9.2) from dual; //9
			
round()
-------
	It will return nearest value.
	ex:
		select round(10.5) from dual; // 11 
		select round(10.4) from dual; //10 

trunc()
-------
	It will remove decimals.
	ex:
		select trunc(10.56) from dual; //10
			
		select trunc(56.341) from dual; //56

greatest()
---------
	It will return greatest value.
	ex:
		select greatest(10,20,30) from dual; //30

least()
------
	It will return least value.
	ex:
		select least(10,20,30) from dual; //10


Working with Date values
==========================
Every database software support different date patterns.
ex:
	Oracle - dd-MMM-yy
	MySQL  - yyyy-MM-dd

We need to insert date value inthe pattern which is supported by underlying database software.

ex:

drop table emp1;

create table emp1(eid number(3),ename varchar2(10),edoj date);

insert into emp1 values(301,'Alan','01-JAN-22');

insert into emp1 values(302,'Jose',sysdate);

insert into emp1 values(303,'Lisa',current_date);

insert into emp1 values(304,'Jessi','15-MAR-23');

commit;


iii) Date functions
-------------------

We have following list of date functions

ADD_MONTHS()
-------------
It will add months in a given date.
ex:
	select ADD_MONTHS(sysdate,4) from dual;

	select ADD_MONTHS('01-JAN-23',5) from dual;


MONTHS_BETWEEN()
--------------
It will return number of months between two given dates.
ex:
	select MONTHS_BETWEEN('01-JAN-23','01-JUL-23') from dual;

	select abs(MONTHS_BETWEEN('01-JAN-23','01-JUL-23')) from dual;

	select abs(MONTHS_BETWEEN('01-JAN-23','15-JUL-23')) from dual;	

	
NEXT_DAY()
--------
	It will return given day in a week.
	ex:
		select NEXT_DAY(sysdate,'SUNDAY') from dual;

		select NEXT_DAY(sysdate,'TUESDAY') from dual;


LAST_DAY()
----------
	It will return last date of a month.
	ex:
		select LAST_DAY(sysdate) from dual;

		select LAST_DAY('01-FEB-23') from dual;

iv) Conversion function
-------------------------
A conversion function is used to convert from one type to another type.

ex:
	TO_CHAR() 

We have two pseudo for TO_CHAR() .

1) number to_char()
------------------
	It will take '9' in digits and $ symbol.
	ex:
		select eid,ename,esal from emp;

		select eid,ename,TO_CHAR(esal,'9,999') from emp;

		select eid,ename,TO_CHAR(esal,'99,999') from emp;

		select eid,ename,TO_CHAR(esal,'99,999') as ESAL from emp;

		select eid,ename,TO_CHAR(esal,'$99,999') as ESAL from emp;


2) Date  to_char() 
---------------
	select TO_CHAR(sysdate,'dd-MM-yyyy') from dual;
	
	select TO_CHAR(sysdate,'day') from dual;
		
	select TO_CHAR(sysdate,'month') from dual;

	select TO_CHAR(sysdate,'year') from dual;

	select TO_CHAR(sysdate,'dd') from dual;

	select TO_CHAR(sysdate,'MM') from dual;	

	select TO_CHAR(sysdate,'YYYY') from dual;

	select TO_CHAR(sysdate,'HH:MI:SS') from dual;

	select TO_CHAR(sysdate,'yyyy-MM-dd HH:MI:SS') from dual;		

Group by clause
==================
It is used to divide the rows into multiple groups so that we can apply group functions. 

A column which we used in a select clause then same column name we need to use in group by clause.


Q)Write a query to display sum of salary of each department?

	select sum(esal),deptno from emp group by deptno;


Q)Write a query to display maximum salary of each job?

	select max(esal),job from emp group by job;



Q)Write a query to display average salary of each department?

	select avg(esal),deptno from emp group by deptno;


Having clause
==============
It is used to filter the rows in a group by clause.

Having clause must be declare after group by clause.


Q) Write a query to display sum of salary of each department whose sum of salary is greater then 35000?

	select sum(esal),deptno from emp group by deptno having sum(esal)>35000;


Q) Write a query to display minimum salary of each job whose minimum salary is  less then 15000?

  select min(esal),job from emp group by job having min(esal)<15000;



order by clause
--------------
It is used to filter the rows in a table.

Bydefault it will return the records in ascending order.

ex:
	select * from emp order by eid;

	select * from emp order by ename;

	select * from emp order by esal;	

	select * from emp order by esal desc;	

Integrity Constraints
======================
Constraints are a rules which are applied on a table to achieve accuracy and quality of data.

We have five types of contraitnts.

1) NOT NULL

2) UNIQUE 

3) PRIMARY KEY 

4) FOREIGN KEY 

5) CHECK 
 
Constraints can be created at two levels.

i) column level

ii) table level

1) NOT NULL
-------------
NOT NULL constraint does not accept null values.

But it will accept duplicate values.

NOT NULL constraint can be created at column level.


column level
-----------
drop table student;

create table student(sno number(3) NOT NULL,sname varchar2(10),sadd varchar2(12));

insert into student values(101,'raja','hyd');

insert into student values(null,'ravi','delhi'); //invalid 

insert into student values(101,'ramana','vizag');

commit;

NOT NULL constraint can be created for multiple columns also.

ex:
	
drop table student;

create table student(sno number(3) NOT NULL,
				sname varchar2(10) NOT NULL,
					sadd varchar2(12) NOT NULL);

insert into student values(101,'raja','hyd');

insert into student values(null,'ravi','delhi'); //invalid 

insert into student values(102,null,'vizag');//invalid

insert into student values(103,'ramana',null); //invalid 

commit;

2) UNIQUE 
-----------
UNIQUE constraint does not accept duplicate values.

But it will accept null values.

UNIQUE constraint can be created at column level and table level.

column level
----------
drop table student;

create table student(sno number(3) UNIQUE,sname varchar2(10),sadd varchar2(12));

insert into student values(101,'raja','hyd');

insert into student values(null,'ravi','delhi'); 

insert into student values(101,'ramana','vizag'); //invalid 

commit;


table level
-----------

drop table student;

create table student(sno number(3),sname varchar2(10),
					sadd varchar2(12),UNIQUE(sno));

insert into student values(101,'raja','hyd');

insert into student values(null,'ravi','delhi'); 

insert into student values(101,'ramana','vizag'); //invalid 

commit;

UNIQUE constraint can be created for multiple columns also.

ex:

column level
----------
drop table student;

create table student(sno number(3) UNIQUE,
				sname varchar2(10) UNIQUE,
					sadd varchar2(12) UNIQUE);

insert into student values(101,'raja','hyd');

insert into student values(102,'ravi','delhi'); 

insert into student values(101,'ramana','vizag'); //invalid 

commit;	

3)Primary key
--------------
It is a combination of NOT NULL and UNIQUE constraint.

It does not accept null values and duplicate values

A table can have only one primary key.

primary key can be created at column level and table level.


column level
-----------

ex:
	
drop table student;

create table student(sno number(3) primary key,
				sname varchar2(10) ,
					sadd varchar2(12));

insert into student values(101,'raja','hyd');

insert into student values(null,'ravi','delhi');  //invalid 

insert into student values(101,'ramana','vizag'); //invalid 

commit;


table level
-----------	
drop table student;

create table student(sno number(3) ,
				sname varchar2(10) ,
					sadd varchar2(12), primary key(sno));

insert into student values(101,'raja','hyd');

insert into student values(null,'ravi','delhi');  //invalid 

insert into student values(101,'ramana','vizag'); //invalid 

commit;












































