To see the output in PL/SQL we need to use below command.
ex:
	SQL> set  serveroutput  on 


Control Statements
==================

1)IF THEN 
-------------
It will evaluate the code only if our condition is true.

ex:
	DECLARE
	A number:=5;
	BEGIN
	
	IF A>2 THEN 
	DBMS_OUTPUT.PUT_LINE('Welcome');
	END IF;

	END;
	/

ex:
---
	DECLARE
	A number:=5;
	BEGIN
	
	IF A>20 THEN 
	DBMS_OUTPUT.PUT_LINE('Welcome');
	END IF;

	END;
	/

2) IF THEN ELSE 
----------------
It will evaluate the code either our condition is true or false.

ex:
	DECLARE 
	A number:=25;
	BEGIN

	IF A<18 THEN
	DBMS_OUTPUT.PUT_LINE('You r not eligible to vote');
	ELSE
	DBMS_OUTPUT.PUT_LINE('You r eligible to vote');
	END IF;		

	END;
	/

ex:
	DECLARE 
	A number:=5;
	BEGIN

	IF A<18 THEN
	DBMS_OUTPUT.PUT_LINE('You r not eligible to vote');
	ELSE
	DBMS_OUTPUT.PUT_LINE('You r eligible to vote');
	END IF;		

	END;
	/	

3) IF THEN ELSIF THEN ELSE 
------------------------------
It will evaluate the code based on multiple conditions.

ex:
	DECLARE 
	n number(3);
	BEGIN
	n:=&opt;

	IF n=100 THEN
	DBMS_OUTPUT.PUT_LINE('It is police number');
	ELSIF n=103 THEN
	DBMS_OUTPUT.PUT_LINE('It is enquiry number');
	ELSIF  n=108 THEN
	DBMS_OUTPUT.PUT_LINE('It is emergency number');
	ELSE
	DBMS_OUTPUT.PUT_LINE('Invalid optionn');
	END IF;

	END;
	/
	
LOOPS
======
There are three types of LOOPS in PL/SQL.

1) Simple Loop

2) While Loop

3) For Loop 

1) Simple Loop
----------------
It will evaluate the code untill our condition is true.

ex:
	DECLARE
	A number:=1;
	BEGIN
	DBMS_OUTPUT.PUT_LINE('Welcome');
	
	LOOP
	DBMS_OUTPUT.PUT_LINE('Hello');
	EXIT WHEN A=4;
	A:=A+1;
	END LOOP;

	DBMS_OUTPUT.PUT_LINE('Thank You');
	END;
	/

ex:
---
	DECLARE
	A number:=1;
	BEGIN
	
	LOOP
	DBMS_OUTPUT.PUT_LINE(A);
	EXIT WHEN A=10;
	A:=A+1;
	END LOOP;

	END;
	/

2) While Loop
----------------
It will evaluate the code untill our condition is true.

ex:
	DECLARE
	A number:=1;
	BEGIN
	DBMS_OUTPUT.PUT_LINE('Welcome');
	
	WHILE A<=4 LOOP
	DBMS_OUTPUT.PUT_LINE('Hello');
	A:=A+1;
	END LOOP;

	DBMS_OUTPUT.PUT_LINE('Thank You');
	END;
	/

ex:
	DECLARE
	A number:=10;
	BEGIN
	
	WHILE A>=1 LOOP
	DBMS_OUTPUT.PUT_LINE(A);
	A:=A-1;
	END LOOP;

	END;
	/
	

2) For Loop
----------------
It will evaluate the code untill our condition is true.

ex:
	DECLARE
	A number;
	BEGIN
	DBMS_OUTPUT.PUT_LINE('Welcome');
	
	FOR A IN 1 .. 4 LOOP
	DBMS_OUTPUT.PUT_LINE('Hello');
	END LOOP;

	DBMS_OUTPUT.PUT_LINE('Thank You');
	END;
	/

ex:
	DECLARE
	A number;
	N number:=5;
	BEGIN
	
	FOR A IN 1 .. 10 LOOP
	DBMS_OUTPUT.PUT_LINE(N||' * '||A||' = '||N*A);
	END LOOP;

	END;
	/


Exceptions
============
Runtime Errors are called Exceptions.

In PL/SQL exceptions are divided into two types.

1)Predefined Exceptions

2)Userdefined Exceptions  

1)Predefined Exceptions
---------------------------
Built-In exceptions are called predefined exceptions.

We have following list of predefined exceptions.

1)NO_DATA_FOUND
	
2)TOO_MANY_ROWS 

3)ZERO_DIVIDE 

4)VALUE_ERROR 

5)DUP_VAL_ON_INDEX  

6)OTHERS 

1)NO_DATA_FOUND
-----------------
This exception will occur when select statement does not return any row.

ex:
	DECLARE 
	L_ename emp.ename%TYPE;
	BEGIN
	select ename into L_ename from emp where eid=209;
	DBMS_OUTPUT.PUT_LINE(L_ename);
	EXCEPTION
	WHEN NO_DATA_FOUND THEN
	DBMS_OUTPUT.PUT_LINE('Please check the employee ID');
	END;
	/

2)TOO_MANY_ROWS 
----------------
This exception will occur when select statement returns more then one row.

ex:

	DECLARE 
	L_ename emp.ename%TYPE;
	BEGIN
	select ename into L_ename from emp where deptno=10;
	DBMS_OUTPUT.PUT_LINE(L_ename);
	EXCEPTION
	WHEN TOO_MANY_ROWS THEN
	DBMS_OUTPUT.PUT_LINE('select stmt returns more then one row');
	END;
	/

3)ZERO_DIVIDE 
----------------
This exception will occur when we are trying to divide any number with zero.
ex:
	DECLARE 
	A number;
	BEGIN
	A:=10/0;
	DBMS_OUTPUT.PUT_LINE(A);
	EXCEPTION 
	WHEN ZERO_DIVIDE THEN 
	DBMS_OUTPUT.PUT_LINE('Please dont divide number with zero');
	END;
	/

4) VALUE_ERROR 
---------------
This exception will occur when there is a mismatch with datatype or size.

ex:
	DECLARE 
	A number(3);	
	BEGIN
	A:=12345;
	DBMS_OUTPUT.PUT_LINE(A);
	EXCEPTION 
	WHEN VALUE_ERROR THEN
	DBMS_OUTPUT.PUT_LINE('Please check the size');
	END;
	/	

ex:
	DECLARE 
	L_esal emp.esal%TYPE;
	BEGIN
	select ename into L_esal from emp where eid=201;
	DBMS_OUTPUT.PUT_LINE(L_esal);
	EXCEPTION
	WHEN VALUE_ERROR THEN
	DBMS_OUTPUT.PUT_LINE('Please check the datatype');
	END;
	/

5)DUP_VAL_ON_INDEX  
------------------------
This exception will occur whenever we trying to insert duplicate value in a primary key.
	ex:
		alter table emp ADD primary key(eid);

		BEGIN
		insert into emp values(202,'Chan',34000,50,'Salesman',100);
		DBMS_OUTPUT.PUT_LINE('Record Inserted');
		Exception 
		WHEN DUP_VAL_ON_INDEX THEN 
		DBMS_OUTPUT.PUT_LINE('Duplicates are not allowed');
		END;
		/







6) OTHERS
---------
It is a universal angular exception which handles all types of exceptions.

ex:
	DECLARE 
	L_ename emp.ename%TYPE;
	BEGIN
	select ename into L_ename from emp where eid=209;
	DBMS_OUTPUT.PUT_LINE(L_ename);
	EXCEPTION
	WHEN OTHERS THEN
	DBMS_OUTPUT.PUT_LINE('Please check the employee ID');
	END;
	/

2)Userdefined Exceptions 
-------------------------
Exceptions which are created by the user based on the application requirement are called userdefined exceptions.

steps to create userdefined exceptions
----------------------------------
step1:
	Declare the exception 
	ex:
		<EXCEPTION_NAME> EXCEPTION ;

step2:
	RAISE the exception 
	ex:
		RAISE <EXCEPTION_NAME>;
step3:
	Handle the exception 
	ex:
		WHEN <EXCEPTION_NAME> THEN	

ex:
---
	DECLARE 
	SAL number:=5000;
	MY_EXP EXCEPTION ;
	BEGIN
	
	IF SAL>2000 THEN 
	RAISE MY_EXP;
	END IF; 
	DBMS_OUTPUT.PUT_LINE(SAL);

	EXCEPTION
	WHEN MY_EXP THEN 
	DBMS_OUTPUT.PUT_LINE('Salary is too high');
	END;
	/	
	
Cursors
=========
Cursor is a memory location which is used to run SQL commands.

We have two types of cursors in PL/SQL.

1)Implicit cursor

2)Explicit cursor 

1)Implicit cursor
----------------
All the operations related to cursor like opening the cursor , processing the cursor and closing the cursor which is done automatically is called implicit cursor.

Implicit cursor contains four types of cursor attributes.

i) SQL%ISOPEN 
-----------
	It is a boolean attribute which always returns false.

ii) SQL%FOUND 
-----------------
	It is a boolean attribute which returns true if SQL command is success and 
	returns false if SQL command is failed.

iii) SQL%NOTFOUND 
----------------
	It is completely reverse of SQL%FOUND.

	It is a boolean attribute which returns false if SQL command is success and 
	returns true if SQL command is failed.

iv) SQL%ROWCOUNT 
-------------
	It will return number of values effected in a database table.


SQL%ISOPEN 
-----------

	BEGIN
	update student set sname='jojo' where sno=101;
	IF SQL%ISOPEN THEN 
	DBMS_OUTPUT.PUT_LINE('cursor is open');
	ELSE
	DBMS_OUTPUT.PUT_LINE('cursor is closed');
	END IF;
	END;
	/	

ii) SQL%FOUND 
-----------------
	BEGIN
	update emp set ename='AntMan' where eid=201;
	IF SQL%FOUND THEN 
	DBMS_OUTPUT.PUT_LINE('Record updated');
	ELSE
	DBMS_OUTPUT.PUT_LINE('Record not updated');
	END IF;
	END;
	/	

iii) SQL%NOTFOUND 
----------------
	BEGIN
	update emp set ename='IronMan' where eid=201;
	IF SQL%NOTFOUND THEN 
	DBMS_OUTPUT.PUT_LINE('Record updated');
	ELSE
	DBMS_OUTPUT.PUT_LINE('Record not updated');
	END IF;
	END;
	/

iv) SQL%ROWCOUNT
-----------------
	BEGIN
	delete from student;
	DBMS_OUTPUT.PUT_LINE(SQL%ROWCOUNT||' Records Deleted');
	END;
	/







































